#!/usr/bin/env node

import { Octokit } from '@octokit/rest';
import { logger } from '../utils/logger.js';
import fs from 'fs/promises';

/**
 * GitHub Data Storage Service for Hanna AI News Agent
 *
 * Automatically commits Tavily search results and reports to GitHub
 * for permanent storage and visibility
 */
class GitHubDataStorage {
  constructor() {
    this.octokit = null;
    this.owner = 'nickstellarstreamai';
    this.repo = 'hanna-ai-news-agent';
    this.initialized = false;
  }

  async initialize() {
    if (this.initialized) return;

    if (!process.env.GITHUB_TOKEN) {
      logger.warn('GITHUB_TOKEN not found - GitHub data storage disabled');
      return;
    }

    this.octokit = new Octokit({
      auth: process.env.GITHUB_TOKEN
    });

    try {
      // Test connection
      const { data: repo } = await this.octokit.rest.repos.get({
        owner: this.owner,
        repo: this.repo
      });

      logger.info(`GitHub data storage initialized for ${repo.full_name}`);
      this.initialized = true;
    } catch (error) {
      logger.error('Failed to initialize GitHub data storage:', error.message);
    }
  }

  /**
   * Save Tavily search results to GitHub
   */
  async saveTavilyResults(tavilyData, weekStart) {
    if (!this.initialized) return null;

    try {
      const timestamp = new Date().toISOString();
      const dateStr = new Date().toISOString().split('T')[0];

      // Format data for storage
      const dataToSave = {
        metadata: {
          weekStart,
          timestamp,
          totalPillars: Object.keys(tavilyData).length,
          totalSearches: Object.values(tavilyData).flat().length,
          totalResults: Object.values(tavilyData).flat()
            .reduce((sum, search) => sum + (search.results?.length || 0), 0)
        },
        tavilyData,
        generatedAt: timestamp
      };

      const fileName = `data/tavily-results/tavily-results-${dateStr}.json`;
      const content = JSON.stringify(dataToSave, null, 2);

      // Check if file already exists
      let sha = null;
      try {
        const { data: existingFile } = await this.octokit.rest.repos.getContent({
          owner: this.owner,
          repo: this.repo,
          path: fileName
        });
        sha = existingFile.sha;
      } catch (error) {
        // File doesn't exist, that's fine
      }

      // Create or update file
      const result = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: this.owner,
        repo: this.repo,
        path: fileName,
        message: `📊 Save Tavily search results for ${weekStart}

- Analyzed ${dataToSave.metadata.totalResults} articles across ${dataToSave.metadata.totalPillars} content pillars
- Generated: ${timestamp}
- Content pillars: ${Object.keys(tavilyData).join(', ')}

🤖 Auto-generated by Hanna AI News Agent`,
        content: Buffer.from(content).toString('base64'),
        sha: sha || undefined
      });

      logger.info(`✅ Tavily results saved to GitHub: ${fileName}`);
      logger.info(`📊 Stored ${dataToSave.metadata.totalResults} articles from ${dataToSave.metadata.totalSearches} searches`);

      return {
        success: true,
        url: result.data.content.html_url,
        fileName,
        metadata: dataToSave.metadata
      };

    } catch (error) {
      logger.error('❌ Failed to save Tavily results to GitHub:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Save complete report data to GitHub
   */
  async saveReportData(reportData, weekStart) {
    if (!this.initialized) return null;

    try {
      const timestamp = new Date().toISOString();
      const dateStr = new Date().toISOString().split('T')[0];

      const fileName = `data/reports/report-data-${dateStr}.json`;
      const content = JSON.stringify(reportData, null, 2);

      // Check if file already exists
      let sha = null;
      try {
        const { data: existingFile } = await this.octokit.rest.repos.getContent({
          owner: this.owner,
          repo: this.repo,
          path: fileName
        });
        sha = existingFile.sha;
      } catch (error) {
        // File doesn't exist, that's fine
      }

      // Create or update file
      const result = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: this.owner,
        repo: this.repo,
        path: fileName,
        message: `📄 Save complete report data for ${weekStart}

- Executive summary, key stories, and content hooks generated
- ${reportData.metadata?.totalSources || 0} sources analyzed
- Generated: ${timestamp}

🤖 Auto-generated by Hanna AI News Agent`,
        content: Buffer.from(content).toString('base64'),
        sha: sha || undefined
      });

      logger.info(`✅ Report data saved to GitHub: ${fileName}`);

      return {
        success: true,
        url: result.data.content.html_url,
        fileName
      };

    } catch (error) {
      logger.error('❌ Failed to save report data to GitHub:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Create a summary commit with links to all data
   */
  async createSummaryCommit(weekStart, tavilyResult, reportResult) {
    if (!this.initialized || !tavilyResult?.success || !reportResult?.success) return;

    try {
      const timestamp = new Date().toISOString();
      const dateStr = new Date().toISOString().split('T')[0];

      const summaryContent = `# Hanna AI Report Summary - ${weekStart}

Generated: ${timestamp}

## 📊 Data Files Created

### Tavily Search Results
- **File**: [${tavilyResult.fileName}](${tavilyResult.url})
- **Articles Analyzed**: ${tavilyResult.metadata.totalResults}
- **Searches Performed**: ${tavilyResult.metadata.totalSearches}
- **Content Pillars**: ${tavilyResult.metadata.totalPillars}

### Complete Report Data
- **File**: [${reportResult.fileName}](${reportResult.url})
- **Contains**: Executive summary, key stories, content hooks, analysis

## 🎯 Content Pillars Analyzed
${Object.keys(tavilyResult.metadata).includes('tavilyData') ?
  Object.keys(JSON.parse(await fs.readFile(`./data/tavily-results/tavily-results-${dateStr}.json`, 'utf8')).tavilyData).map(pillar => `- ${pillar}`).join('\n') :
  'Career development topics'}

## 🔗 Access Links
- **Tavily Results**: ${tavilyResult.url}
- **Report Data**: ${reportResult.url}

---
*Auto-generated by Hanna AI News Agent*
`;

      const summaryFileName = `data/summaries/weekly-summary-${dateStr}.md`;

      await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: this.owner,
        repo: this.repo,
        path: summaryFileName,
        message: `📋 Weekly summary for ${weekStart}

Data preservation complete:
✅ Tavily search results: ${tavilyResult.metadata.totalResults} articles
✅ Complete report data saved
✅ All research preserved in GitHub

🤖 Auto-generated by Hanna AI News Agent`,
        content: Buffer.from(summaryContent).toString('base64')
      });

      logger.info(`✅ Summary commit created: ${summaryFileName}`);

    } catch (error) {
      logger.error('❌ Failed to create summary commit:', error.message);
    }
  }

  /**
   * Get usage statistics
   */
  getStats() {
    return {
      initialized: this.initialized,
      hasToken: !!process.env.GITHUB_TOKEN,
      owner: this.owner,
      repo: this.repo
    };
  }
}

export default new GitHubDataStorage();